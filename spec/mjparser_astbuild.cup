package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
     
     //	kad ne moze da se nastavi parsiranje
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
  	//prijava greske i zaustavlja se parsiranje
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, COMMA,EQUAL, LSQUARE,RSQUARE, INC, DEC, COLON;
terminal LPAREN, RPAREN, MUL, DIV, MOD, PLUS, MINUS, SAME, NOTSAME, G, L, GEQ, LEQ, NEW;
terminal CONST, VOID, READ,PRINT, GOTO;

terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal String BOOL_CONST;

nonterminal ItemDeclList ItemDeclList;
nonterminal VarDeclist VarDeclist;
nonterminal VarMultipleList VarMultipleList;
nonterminal VarSingle VarSingle;
nonterminal ArrayDecl ArrayDecl;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal ItemDecl ItemDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstMultipleList ConstMultipleList;
nonterminal SingleConst SingleConst;
nonterminal MethodDeclList MethodDeclList;
nonterminal StatementList StatementList;
nonterminal Addop Addop;
nonterminal Line Line;
nonterminal Label Label;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal MinusOption MinusOption;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorArr DesignatorArr;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Factor, Term;

Program ::= (Program) PROG ProgName:p ItemDeclList:I1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, I1, M2); RESULT.setLine(pleft); :};		

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

ItemDeclList ::= (ItemDeclarations) ItemDeclList:I1 ItemDecl:I2 {: RESULT=new ItemDeclarations(I1, I2); RESULT.setLine(I1left); :}
				 | 
				 (NoItemDecl) {: RESULT=new NoItemDecl(); :} /* epsilon */
				 ;

ItemDecl ::= (Constant)ConstDecl:C1 {: RESULT=new Constant(C1); RESULT.setLine(C1left); :}
			 |
			 (VarsDec)VarDeclist:V1 {: RESULT=new VarsDec(V1); RESULT.setLine(V1left); :}
			 ;	
					
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstMultipleList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

ConstMultipleList ::= (MultipleConst) ConstMultipleList:C1 COMMA SingleConst:S2 {: RESULT=new MultipleConst(C1, S2); RESULT.setLine(C1left); :}
					  |
					  (OneConst) SingleConst:S1 {: RESULT=new OneConst(S1); RESULT.setLine(S1left); :}
					  ;
				
SingleConst ::= (SingleNumConst) IDENT:constName EQUAL NUM_CONST:constValue {: RESULT=new SingleNumConst(constName, constValue); RESULT.setLine(constNameleft); :}
				|
				(SingleCharConst)IDENT:charName EQUAL CHAR_CONST:charValue {: RESULT=new SingleCharConst(charName, charValue); RESULT.setLine(charNameleft); :}
				|
				(SingleBoolConst)IDENT:boolName EQUAL BOOL_CONST:boolValue {: RESULT=new SingleBoolConst(boolName, boolValue); RESULT.setLine(boolNameleft); :}
				;
						
VarDeclist ::= (SingleVar) Type:varType VarMultipleList:V1 SEMI {: RESULT=new SingleVar(varType, V1); RESULT.setLine(varTypeleft); :}
			   |
		 	   (VarDeclError) error SEMI:l
			   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :} {: RESULT=new VarDeclError(); :}
			   ;
VarMultipleList ::= (VarListV) VarMultipleList:V1 COMMA VarSingle:V2 {: RESULT=new VarListV(V1, V2); RESULT.setLine(V1left); :}
					| 
					(VarListArr) VarMultipleList:V1 COMMA ArrayDecl:A2 {: RESULT=new VarListArr(V1, A2); RESULT.setLine(V1left); :}
					|
					(ArrVarDecl) ArrayDecl:A1 {: RESULT=new ArrVarDecl(A1); RESULT.setLine(A1left); :}
					|
					(SimpleVar) VarSingle:V1 {: RESULT=new SimpleVar(V1); RESULT.setLine(V1left); :}
					;
								
VarSingle ::= (VarSingle) IDENT:varName {: RESULT=new VarSingle(varName); RESULT.setLine(varNameleft); :};

ArrayDecl ::= (ArrVar) IDENT:arrName LSQUARE RSQUARE {: RESULT=new ArrVar(arrName); RESULT.setLine(arrNameleft); :};

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				   |
				   (NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				   ;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN ItemDeclList:I3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, I3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeName) VOID IDENT:methName {: RESULT=new MethodTypeName(methName); RESULT.setLine(methNameleft); :};

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		     |
		     (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		     ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				    |
				    (SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				    ;
				
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				|
				(Statementslistt) StatementList:S1 Label:L2 COLON Statement:S3 {: RESULT=new Statementslistt(S1, L2, S3); RESULT.setLine(S1left); :}
				|
				(StatementJedini) Statement:S1 {: RESULT=new StatementJedini(S1); RESULT.setLine(S1left); :}
				|
				(NoStmtLabl) Label:L1 COLON Statement:S2 {: RESULT=new NoStmtLabl(L1, S2); RESULT.setLine(L1left); :}
				;
				
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Expr ::= (ExprC) Expr:a Addop:A1 Term:b {: RESULT=new ExprC(a, A1, b); RESULT.setLine(aleft); :}
			|
			(ExprS) MinusOption:M1 Term:T2 {: RESULT=new ExprS(M1, T2); RESULT.setLine(M1left); :}
			;
			
Term ::= (TermC) Term:a Mulop:M1 Factor:b {: RESULT=new TermC(a, M1, b); RESULT.setLine(aleft); :}
			|
			(TermS) Factor:t {: RESULT=new TermS(t); RESULT.setLine(tleft); :}
			;
			

Factor ::=  (NumFactor) NUM_CONST:N1 {: RESULT=new NumFactor(N1); RESULT.setLine(N1left); :}
			|
			(CharFactor) CHAR_CONST:C1 {: RESULT=new CharFactor(C1); RESULT.setLine(C1left); :}
			|
			(BoolFactor) BOOL_CONST:B1 {: RESULT=new BoolFactor(B1); RESULT.setLine(B1left); :}
			|
			(NewFactor) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new NewFactor(T1, E2); RESULT.setLine(T1left); :}
			|
			(ExprFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ExprFactor(E1); RESULT.setLine(E1left); :}
			|
			(DesignatorFactor) Designator:D1 {: RESULT=new DesignatorFactor(D1); RESULT.setLine(D1left); :}
			;
		
ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
		
Mulop ::= (MulOperator) MUL {: RESULT=new MulOperator(); :}
		   	|
			(ModOperator) MOD {: RESULT=new ModOperator(); :}
			|
			(DivOperator) DIV {: RESULT=new DivOperator(); :}
			;
		
Addop ::= (PlusOperator) PLUS {: RESULT=new PlusOperator(); :}
			|
			(MinusOperator) MINUS {: RESULT=new MinusOperator(); :}
			;

Relop ::=(SameRelOp) SAME {: RESULT=new SameRelOp(); :}
		| 
		(NotSameRelOp) NOTSAME {: RESULT=new NotSameRelOp(); :}
		| 
		(GreaterRelOp) G {: RESULT=new GreaterRelOp(); :}
		| 
		(GEQRelOp) GEQ {: RESULT=new GEQRelOp(); :}
		| 
		(LowerRelOp) L {: RESULT=new LowerRelOp(); :}
		| 
		(LEQRelOp) LEQ {: RESULT=new LEQRelOp(); :}
		;
		
MinusOption ::= (Negative) MINUS {: RESULT=new Negative(); :}
			|
			(Positive) {: RESULT=new Positive(); :} /* epsilon */
			;

Label ::= (LabelTarget)IDENT:name {: RESULT=new LabelTarget(name); RESULT.setLine(nameleft); :};

Statement ::= (DesStatement) DesignatorStatement:D1 SEMI {: RESULT=new DesStatement(D1); RESULT.setLine(D1left); :}
          	  	|
		   	  	(ErrorStmt) error SEMI:l
		    	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
           		|
				(ReadStatement) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
				|
				(PrintStatementNoArg) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStatementNoArg(E1); RESULT.setLine(E1left); :}
				|
				(PrintStatementWArgs) PRINT LPAREN Expr:E1 COMMA NUM_CONST:N2 RPAREN SEMI {: RESULT=new PrintStatementWArgs(E1, N2); RESULT.setLine(E1left); :}
				|
				(GotoStatement) GOTO IDENT:gotoLabela SEMI {: RESULT=new GotoStatement(gotoLabela); RESULT.setLine(gotoLabelaleft); :}
		    	|
		    	(StatementsMore) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementsMore(S1); RESULT.setLine(S1left); :}
				|
		   		(ProcCall) Designator:func LPAREN ActualPars:A1 RPAREN SEMI {: RESULT=new ProcCall(func, A1); RESULT.setLine(funcleft); :}
				;
			

DesignatorStatement ::= (AssignDesign) Designator:a EQUAL Expr:b {: RESULT=new AssignDesign(a, b); RESULT.setLine(aleft); :}	
						|
						(DesignatorINC)Designator:D1 INC {: RESULT=new DesignatorINC(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorDEC)Designator:D1 DEC {: RESULT=new DesignatorDEC(D1); RESULT.setLine(D1left); :}
						;
					
Designator ::= (SingleDesignator) IDENT:name {: RESULT=new SingleDesignator(name); RESULT.setLine(nameleft); :}
				|
				(ArrayDesignator) DesignatorArr:D1 LSQUARE Expr:desExpr RSQUARE {: RESULT=new ArrayDesignator(D1, desExpr); RESULT.setLine(D1left); :}
				;

DesignatorArr ::=(DesignatorArr) Designator:D1 {: RESULT=new DesignatorArr(D1); RESULT.setLine(D1left); :};

